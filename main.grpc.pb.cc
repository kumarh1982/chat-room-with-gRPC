// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: main.proto

#include "main.pb.h"
#include "main.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hw {

static const char* MainServer_method_names[] = {
  "/hw.MainServer/RegisterClient",
  "/hw.MainServer/ListRoom",
  "/hw.MainServer/JoinRoom",
  "/hw.MainServer/LeaveRoom",
  "/hw.MainServer/Chat",
};

std::unique_ptr< MainServer::Stub> MainServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MainServer::Stub> stub(new MainServer::Stub(channel));
  return stub;
}

MainServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterClient_(MainServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRoom_(MainServer_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_JoinRoom_(MainServer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveRoom_(MainServer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chat_(MainServer_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MainServer::Stub::RegisterClient(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::ChatRoom* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw::ChatRoom>* MainServer::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw::ChatRoom>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, request);
}

::grpc::ClientReader< ::hw::ChatRoom>* MainServer::Stub::ListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request) {
  return new ::grpc::ClientReader< ::hw::ChatRoom>(channel_.get(), rpcmethod_ListRoom_, context, request);
}

::grpc::ClientAsyncReader< ::hw::ChatRoom>* MainServer::Stub::AsyncListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::hw::ChatRoom>::Create(channel_.get(), cq, rpcmethod_ListRoom_, context, request, tag);
}

::grpc::Status MainServer::Stub::JoinRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_JoinRoom_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw::Request>* MainServer::Stub::AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw::Request>::Create(channel_.get(), cq, rpcmethod_JoinRoom_, context, request);
}

::grpc::Status MainServer::Stub::LeaveRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_LeaveRoom_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw::Request>* MainServer::Stub::AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw::Request>::Create(channel_.get(), cq, rpcmethod_LeaveRoom_, context, request);
}

::grpc::Status MainServer::Stub::Chat(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Chat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw::Request>* MainServer::Stub::AsyncChatRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw::Request>::Create(channel_.get(), cq, rpcmethod_Chat_, context, request);
}

MainServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MainServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MainServer::Service, ::hw::Request, ::hw::ChatRoom>(
          std::mem_fn(&MainServer::Service::RegisterClient), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MainServer_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< MainServer::Service, ::hw::Request, ::hw::ChatRoom>(
          std::mem_fn(&MainServer::Service::ListRoom), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MainServer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MainServer::Service, ::hw::Request, ::hw::Request>(
          std::mem_fn(&MainServer::Service::JoinRoom), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MainServer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MainServer::Service, ::hw::Request, ::hw::Request>(
          std::mem_fn(&MainServer::Service::LeaveRoom), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      MainServer_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MainServer::Service, ::hw::Request, ::hw::Request>(
          std::mem_fn(&MainServer::Service::Chat), this)));
}

MainServer::Service::~Service() {
}

::grpc::Status MainServer::Service::RegisterClient(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::ChatRoom* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainServer::Service::ListRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::grpc::ServerWriter< ::hw::ChatRoom>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainServer::Service::JoinRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainServer::Service::LeaveRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainServer::Service::Chat(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RoomServer_method_names[] = {
  "/hw.RoomServer/Chat",
};

std::unique_ptr< RoomServer::Stub> RoomServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< RoomServer::Stub> stub(new RoomServer::Stub(channel));
  return stub;
}

RoomServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Chat_(RoomServer_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::hw::Request, ::hw::Request>* RoomServer::Stub::ChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::hw::Request, ::hw::Request>(channel_.get(), rpcmethod_Chat_, context);
}

::grpc::ClientAsyncReaderWriter< ::hw::Request, ::hw::Request>* RoomServer::Stub::AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::hw::Request, ::hw::Request>::Create(channel_.get(), cq, rpcmethod_Chat_, context, tag);
}

RoomServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      RoomServer_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< RoomServer::Service, ::hw::Request, ::hw::Request>(
          std::mem_fn(&RoomServer::Service::Chat), this)));
}

RoomServer::Service::~Service() {
}

::grpc::Status RoomServer::Service::Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw::Request, ::hw::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hw

