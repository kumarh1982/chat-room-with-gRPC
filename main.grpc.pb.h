// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: main.proto
#ifndef GRPC_main_2eproto__INCLUDED
#define GRPC_main_2eproto__INCLUDED

#include "main.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace hw {

class MainServer final {
 public:
  static constexpr char const* service_full_name() {
    return "hw.MainServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::ChatRoom* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::ChatRoom>> AsyncRegisterClient(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::ChatRoom>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::hw::ChatRoom>> ListRoom(::grpc::ClientContext* context, const ::hw::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::hw::ChatRoom>>(ListRoomRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hw::ChatRoom>> AsyncListRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hw::ChatRoom>>(AsyncListRoomRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status JoinRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>> AsyncJoinRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>>(AsyncJoinRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status Chat(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>> AsyncChat(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>>(AsyncChatRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hw::ChatRoom>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::hw::ChatRoom>* ListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::hw::ChatRoom>* AsyncListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>* AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hw::Request>* AsyncChatRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::ChatRoom* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::ChatRoom>> AsyncRegisterClient(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::ChatRoom>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::hw::ChatRoom>> ListRoom(::grpc::ClientContext* context, const ::hw::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::hw::ChatRoom>>(ListRoomRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::hw::ChatRoom>> AsyncListRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::hw::ChatRoom>>(AsyncListRoomRaw(context, request, cq, tag));
    }
    ::grpc::Status JoinRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>> AsyncJoinRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>>(AsyncJoinRoomRaw(context, request, cq));
    }
    ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    ::grpc::Status Chat(::grpc::ClientContext* context, const ::hw::Request& request, ::hw::Request* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>> AsyncChat(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hw::Request>>(AsyncChatRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::hw::ChatRoom>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::hw::ChatRoom>* ListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request) override;
    ::grpc::ClientAsyncReader< ::hw::ChatRoom>* AsyncListRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::hw::Request>* AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hw::Request>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hw::Request>* AsyncChatRaw(::grpc::ClientContext* context, const ::hw::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_RegisterClient_;
    const ::grpc::RpcMethod rpcmethod_ListRoom_;
    const ::grpc::RpcMethod rpcmethod_JoinRoom_;
    const ::grpc::RpcMethod rpcmethod_LeaveRoom_;
    const ::grpc::RpcMethod rpcmethod_Chat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::ChatRoom* response);
    virtual ::grpc::Status ListRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::grpc::ServerWriter< ::hw::ChatRoom>* writer);
    virtual ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response);
    virtual ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response);
    virtual ::grpc::Status Chat(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::ChatRoom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::hw::Request* request, ::grpc::ServerAsyncResponseWriter< ::hw::ChatRoom>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRoom() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::grpc::ServerWriter< ::hw::ChatRoom>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRoom(::grpc::ServerContext* context, ::hw::Request* request, ::grpc::ServerAsyncWriter< ::hw::ChatRoom>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_JoinRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinRoom(::grpc::ServerContext* context, ::hw::Request* request, ::grpc::ServerAsyncResponseWriter< ::hw::Request>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::hw::Request* request, ::grpc::ServerAsyncResponseWriter< ::hw::Request>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Chat() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chat(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChat(::grpc::ServerContext* context, ::hw::Request* request, ::grpc::ServerAsyncResponseWriter< ::hw::Request>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterClient<WithAsyncMethod_ListRoom<WithAsyncMethod_JoinRoom<WithAsyncMethod_LeaveRoom<WithAsyncMethod_Chat<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::ChatRoom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRoom() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::grpc::ServerWriter< ::hw::ChatRoom>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_JoinRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Chat() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chat(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::hw::Request, ::hw::ChatRoom>(std::bind(&WithStreamedUnaryMethod_RegisterClient<BaseClass>::StreamedRegisterClient, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::ChatRoom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hw::Request,::hw::ChatRoom>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_JoinRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::hw::Request, ::hw::Request>(std::bind(&WithStreamedUnaryMethod_JoinRoom<BaseClass>::StreamedJoinRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_JoinRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hw::Request,::hw::Request>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::hw::Request, ::hw::Request>(std::bind(&WithStreamedUnaryMethod_LeaveRoom<BaseClass>::StreamedLeaveRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hw::Request,::hw::Request>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Chat() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::hw::Request, ::hw::Request>(std::bind(&WithStreamedUnaryMethod_Chat<BaseClass>::StreamedChat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Chat(::grpc::ServerContext* context, const ::hw::Request* request, ::hw::Request* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hw::Request,::hw::Request>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_JoinRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_Chat<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListRoom() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::hw::Request, ::hw::ChatRoom>(std::bind(&WithSplitStreamingMethod_ListRoom<BaseClass>::StreamedListRoom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRoom(::grpc::ServerContext* context, const ::hw::Request* request, ::grpc::ServerWriter< ::hw::ChatRoom>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListRoom(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::hw::Request,::hw::ChatRoom>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListRoom<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterClient<WithSplitStreamingMethod_ListRoom<WithStreamedUnaryMethod_JoinRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_Chat<Service > > > > > StreamedService;
};

class RoomServer final {
 public:
  static constexpr char const* service_full_name() {
    return "hw.RoomServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::hw::Request, ::hw::Request>> Chat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::hw::Request, ::hw::Request>>(ChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::hw::Request, ::hw::Request>> AsyncChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::hw::Request, ::hw::Request>>(AsyncChatRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::hw::Request, ::hw::Request>* ChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::hw::Request, ::hw::Request>* AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::hw::Request, ::hw::Request>> Chat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::hw::Request, ::hw::Request>>(ChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::hw::Request, ::hw::Request>> AsyncChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::hw::Request, ::hw::Request>>(AsyncChatRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::hw::Request, ::hw::Request>* ChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::hw::Request, ::hw::Request>* AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Chat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw::Request, ::hw::Request>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Chat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw::Request, ::hw::Request>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::hw::Request, ::hw::Request>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Chat<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Chat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Chat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Chat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw::Request, ::hw::Request>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace hw


#endif  // GRPC_main_2eproto__INCLUDED
